// <auto-generated />
using System;
using EventBot.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventBot.Migrations.MySql
{
    [DbContext(typeof(MySqlDatabaseService))]
    [Migration("20190618201842_InitialDatabase")]
    partial class InitialDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EventBot.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<ulong>("GuildId");

                    b.Property<ulong>("MessageChannelId");

                    b.Property<ulong>("MessageId");

                    b.Property<DateTime>("Opened");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventBot.Entities.EventParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventId");

                    b.Property<int>("EventRoleId");

                    b.Property<string>("UserData");

                    b.Property<ulong>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventRoleId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("EventBot.Entities.EventRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Emote");

                    b.Property<int>("EventId");

                    b.Property<int>("MaxParticipants");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventRoles");
                });

            modelBuilder.Entity("EventBot.Entities.GuildConfig", b =>
                {
                    b.Property<ulong>("GuildId")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("EventRoleConfirmationChannelId");

                    b.Property<ulong>("ParticipantRoleId");

                    b.Property<string>("Prefix");

                    b.HasKey("GuildId");

                    b.ToTable("GuildConfigs");
                });

            modelBuilder.Entity("EventBot.Entities.Event", b =>
                {
                    b.HasOne("EventBot.Entities.GuildConfig", "Guild")
                        .WithMany("Events")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventBot.Entities.EventParticipant", b =>
                {
                    b.HasOne("EventBot.Entities.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventBot.Entities.EventRole", "Role")
                        .WithMany("Participants")
                        .HasForeignKey("EventRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventBot.Entities.EventRole", b =>
                {
                    b.HasOne("EventBot.Entities.Event", "Event")
                        .WithMany("Roles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
